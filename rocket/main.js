let wrapper = document.getElementById('wrap-sim');
let canvas = document.getElementById('sim');
let ctx = canvas.getContext("2d");
let height, width;

var workerCalcCLP = {};
const vlist = ['y', 'th', 'x'];

var keyPressed = {};
document.onkeyup = function (e) {
    keyPressed[e.keyCode] = false;
}
document.onkeydown = function (e) {
    keyPressed[e.keyCode] = true;
}

let design = {
    params: {},
    controllers: {},
    ui: {}
};

savedUI = ['chk-iniVelX', 'chk-iniVelY', 'chk-center-r', 'chk-iniVelTh', 'field-maxacc'];

let editorCache = {
    K: {},
    tfL: {}
};

$('.latex').each((idx, e) => {
    katex.render(e.textContent, e);
});

$('#myTab a').on('click', function (e) {
    e.preventDefault()
    $(this).tab('show')
})

function decode(string) {
    return RawDeflate.inflate(window.atob(string));
}

function encode(string) {
    return window.btoa(RawDeflate.deflate(string));
}

function load_design(d) {
    design = d;
    $('#field-consts').val(design.params);
    $.each(design.controllers, (key, val) => {
        $('#field-K' + key).val(val);
    })
    $.each(design.ui, (key, val) => {
        if (key.startsWith('chk-')) {
            $('#' + key).prop('checked', val);
        } else {
            $('#' + key).val(val);
        }
    });
}

if (window.location.hash) {
    var hash = window.location.hash.substr(4);
    var version = window.location.hash.substr(2, 2);
    if (version !== '1/') {
        alert(':shared link is generated by unknown version' + version);
    } else {
        load_design(JSON.parse(decode(hash)));
    }
} else {
    $('#field-consts').val(
        `g = 9.8
L = 3; W = 0.3; l = L/2
m = 1; I = 1/3 m*l^2`
    );
}

$('#save-dialog').on('shown.bs.modal', function () {
    design.ui = {};
    savedUI.forEach((e) => {
        if (e.startsWith('chk-')) {
            design.ui[e] = $('#' + e).prop('checked');
        } else {
            design.ui[e] = $('#' + e).val();
        }
    });
    let url = (location.origin === "null" ? 'file://' : location.origin) + location.pathname + '#/1/' + encode(JSON.stringify(design));

    $('#save-url').val(url);
    $('#save-url').trigger('focus');
    $('#save-url').trigger('select');

});

$('#copy-url').on('click', function () {
    $('#save-url').trigger('focus');
    $('#save-url').trigger('select');
    document.execCommand('copy');
});



let updateBode = {
    'y': function () {
        drawBode(editorCache.tfL.y.compile(), logspace(-2, 2, 100), 'wrap-canvas-Ky', 'canvas-Ky');
    },
    'th': function () {
        drawBode(editorCache.tfL.th.compile(), logspace(-2, 2, 100), 'wrap-canvas-Kth', 'canvas-Kth');
    },
    'x': function () {
        drawBode(editorCache.tfL.x.compile(), logspace(-2, 2, 100), 'wrap-canvas-Kx', 'canvas-Kx');
    }
};

let workerJobs = {};

vlist.forEach(
    (v) => {
        $(`#K${v}-tab`).on("shown.bs.tab", updateBode[v]);
        workerCalcCLP[v] = new Worker("worker_calcCLP.js");
        workerJobs[v] = 0;
        workerCalcCLP[v].onmessage = function (e) {
            workerJobs[v]--;
            if (workerJobs[v] == 0) {
                updateCLP(v, e.data[0]);
            }
        }
    }
);


let show_info = true;

function toggle_info() {
    show_info = !show_info;
    if (show_info) {
        $('#toggleinfo').addClass("active");
        $('#toggleinfo').text('hide info')
    } else {
        $('#toggleinfo').removeClass("active");
        $('#toggleinfo').text('show info')
    }
}

let rx = 0,
    rvx = 0,
    rrx = 0;
let ry = 0,
    rvy = 0,
    rry = 0;

let K = {};

function updateCLP(v, roots) {
    let p = root2math(roots);
    let npols = p.length,
        clpols = '',
        firstPole = true;

    for (let i = 0; i < npols; i++) {
        let isStable = true;
        if (p[i].re > 0) {
            isStable = false;
            clpols += '{\\color{red}';
        }
        if (math.abs(p[i].re / p[i].im) < 1e-2) {
            // pure imaginary pole
            if (i < npols - 1 && math.abs(math.add(p[i], p[i + 1])) < 1e-10) {
                clpols += '\\pm' + num2tex(Math.abs(p[i].im), 2) + 'j';
                i++;
            } else {
                clpols += num2tex(p[i].im, 2) + 'j';
            }
        } else if (math.abs(p[i].im / p[i].re) < 1e-2) {
            // real pole
            clpols += num2tex(p[i].re, 2);
        } else {
            if (i < npols - 1 && math.equal(p[i], math.conj(p[i + 1]))) {
                clpols += num2tex(p[i].re, 2) + '\\pm ' +
                    num2tex(Math.abs(p[i].im), 2) + 'j';
                i++;
            } else {
                clpols += num2tex(p[i].re, 2) + (p[i].im > 0 ? '+' : '') +
                    num2tex(p[i].im, 2) + 'j';
            }
        }
        if (!isStable) {
            clpols += '}';
        }
        if (i < npols - 1) {
            clpols += ', ';
        }
    }

    katex.render(
        clpols,
        document.getElementById('clp-' + v), {
            displayMode: true
        }
    );
    $('#clp-' + v).removeClass('now-calc')
}


function updateController(design, toEditor = true) {
    let ret = {
        K: {},
        tfL: {}
    };
    let vars = {};
    let tfP = {};

    if (toEditor) {
        load_design(design);
        draw_info();
    }
    math.eval(design.params, vars);

    for (var key in vars) {
        if (vars.hasOwnProperty(key)) {
            vars[key] = new math.expression.node.ConstantNode(vars[key]);
        }
    }

    vlist.forEach((v) => {
        let eq;
        let Peq;
        if (toEditor) {
            try {
                Peq = math.parse($('#field-P' + v).val());
                tfP[v] = subs(Peq, vars);
                $('#field-P' + v).removeClass('is-invalid').addClass('is-valid');
                $('#vf-P' + v).removeClass('invalid-feedback').addClass('valid-feedback');
                $('#vf-P' + v).text('');
            } catch (e) {
                $('#field-P' + v).removeClass('is-valid').addClass('is-invalid');
                $('#vf-P' + v).removeClass('valid-feedback').addClass('invalid-feedback');
                $('#vf-P' + v).text(e.toString());
                return;
            }
            vars['P' + v] = tfP[v];
            try {
                eq = math.parse(design.controllers[v]);
                editorCache.tfL[v] = new math.expression.node.OperatorNode('*', 'multiply', [eq, tfP[v]]);
                updateBode[v]();
                $('#field-K' + v).removeClass('is-invalid').addClass('is-valid');
                $('#vf-K' + v).removeClass('invalid-feedback').addClass('valid-feedback');
                $('#vf-K' + v).text('');
            } catch (e) {
                $('#field-K' + v).removeClass('is-valid').addClass('is-invalid');
                $('#vf-K' + v).removeClass('valid-feedback').addClass('invalid-feedback');
                $('#vf-K' + v).text(e.toString());
                return;
            }
            vars['K' + v] = eq;
        } else {
            eq = math.parse(design.controllers[v]);
        }
        var Krat = util_rationalize(eq);

        if (toEditor) {
            if (v == 'th') {
                var Prat = util_rationalize(tfP[v]);
                vars['SthKth'] = new math.expression.node.OperatorNode('/', 'divide', [
                    new math.expression.node.OperatorNode('*', 'multiply', [Prat.denominator, Krat.numerator]),
                    new math.expression.node.OperatorNode('+', 'add', [
                        new math.expression.node.OperatorNode('*', 'multiply', [Prat.denominator, Krat.denominator]),
                        new math.expression.node.OperatorNode('*', 'multiply', [Prat.numerator, Krat.numerator])
                    ])
                ])
            }

            $('#clp-' + v).text('(now calculating...)').addClass('now-calc');
            workerJobs[v]++;
            workerCalcCLP[v].postMessage([JSON.stringify(eq), JSON.stringify(tfP[v])]);

            katex.render(
                `${eq.toTex().replace(/SthKth/g,'\\frac{K_\{\\theta\}(s)}{1+P_\{\\theta\}(s)K_\{\\theta\}(s)}')}`,
                document.getElementById('eq-K' + v), {
                    displayMode: true
                }
            );
            katex.render(
                `${Peq.toTex().replace(/SthKth/g,'\\frac{K_\{\\theta\}(s)}{1+P_\{\\theta\}(s)K_\{\\theta\}(s)}')}`,
                document.getElementById('eq-P' + v), {
                    displayMode: true
                }
            );
        }


        let den = util_rationalize(Krat.denominator);
        if (toEditor) {
            try {
                ret.K[v] = Ltisys.realizeFromTf(Krat.coefficients, den.coefficients);
                $('#field-K' + v).removeClass('is-invalid').addClass('is-valid');
                $('#vf-K' + v).removeClass('invalid-feedback').addClass('valid-feedback');
                $('#vf-K' + v).text('');
            } catch (e) {
                $('#field-K' + v).removeClass('is-valid').addClass('is-invalid');
                $('#vf-K' + v).removeClass('valid-feedback').addClass('invalid-feedback');
                $('#vf-K' + v).text(e.toString());
                return;
            }
        } else {
            ret.K[v] = Ltisys.realizeFromTf(Krat.coefficients, den.coefficients);
        }

    });
    if (toEditor) {
        $('#debug').val(JSON.stringify(design));
    }
    return ret;
}

let rockets = [];
let t = 0,
    dt = 1 / 120;

function clear_rockets() {
    rockets = [];
}

function btn_spawn() {
    let dx0 = $('#chk-iniVelX').prop('checked') ? math.random(-5, 5) : 0,
        dy0 = $('#chk-iniVelY').prop('checked') ? math.random(-5, 5) : 0,
        dth0 = $('#chk-iniVelTh').prop('checked') ? math.random(-0.5, 0.5) : 0;
    spawn(design, math.matrix([
        [rx],
        [ry],
        [0],
        [dx0],
        [dy0],
        [dth0]
    ]));
}

function debug_step(v) {
    d = Object.assign({}, design);
    let rx = 0;
    let ry = 0;
    let out = $('#debug-out');
    let idx = 0;
    if (v === 'x') {
        rx = Number($('#field-debug-amount').val());
    } else {
        idx = 1;
        ry = Number($('#field-debug-amount').val());
    }
    d.rgen = (t, rx0, ry0) => math.matrix([
        [rx],
        [ry]
    ]);
    d.debug = (t, r) => {
        out.val(out.val() + `${t.toFixed(4)}\t${r.x.get([idx,0]).toPrecision(5)}\n`);
    }
    spawn(d, math.matrix([
        [0],
        [0],
        [0],
        [0],
        [0],
        [0]
    ]));
}

function spawn(design0, x0) {
    let vars = {};
    let designed = updateController(design0, false);
    math.eval(design0.params, vars);

    let r = new Rocket(
        x0,
        t, {
            y: designed.K.y.clone(),
            th: designed.K.th.clone(),
            x: designed.K.x.clone()
        });


    r.g = toNum(vars.g);
    r.m = toNum(vars.m);
    r.I = toNum(vars.I);
    r.l = toNum(vars.l);
    r.L = toNum(vars.L);
    r.W = toNum(vars.W);
    if (design0.rgen !== undefined) {
        r.rgen = design0.rgen;
    }
    if (design0.debug !== undefined) {
        r.debug = design0.debug;
    }
    rockets.push(r);
}

let vymin = -200,
    vymax = 200,
    vxmin = -200,
    vxmax = 200;
const minvx = 20,
    minvy = 20;
let scale = 1;
let maxAcc = 20;
let center = {
    x: 0,
    y: 0
};

function loop() {
    let txt = "";
    if (keyPressed[37]) {
        // left
        center.x -= 10 / scale;
    }
    if (keyPressed[38]) {
        // Up
        center.y += 10 / scale;
    }
    if (keyPressed[39]) {
        // right
        center.x += 10 / scale;
    }
    if (keyPressed[40]) {
        // down
        center.y -= 10 / scale;
    }
    if (keyPressed[90]) {
        // z
        scale *= 1.02;
    }
    if (keyPressed[88]) {
        // x
        scale /= 1.02;
    }


    if ($('#chk-center-r').prop('checked')) {
        center.x = rx;
        center.y = ry;
    }
    rockets.forEach(function (r) {
        for (let i = 0; i < ((1 / 60) / dt - 0.1); i++) {
            r.step(t, rx, ry, dt);
            t += dt;
        }
        txt += r.x.toString() + '\n';
    });
    rockets = rockets.filter(function (r) {
        let y = r.x.get([1, 0]);
        let x = r.x.get([0, 0]);
        return (!isNaN(x) && !isNaN(y));
    });

    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    ctx.translate(canvas.width / 2, canvas.height / 2);
    ctx.scale(scale * devicePixelRatio, -scale * devicePixelRatio);
    ctx.translate(-center.x, -center.y)
    vxmin = -canvas.width / 2 / scale + center.x;
    vxmax = +canvas.width / 2 / scale + center.x;
    vymin = -canvas.height / 2 / scale + center.y;
    vymax = +canvas.height / 2 / scale + center.y;

    const gw = 1 * Math.pow(10, -Math.floor(Math.log10(scale / 30)))
    ctx.strokeStyle = "#AAAAFF";
    ctx.lineWidth = 0.5 / scale;
    for (let x = Math.floor(vxmin / gw) * gw; x <= vxmax; x += gw) {
        ctx.lineWidth = (x == 0 ? 2 : 0.5) / scale;
        ctx.beginPath();
        ctx.moveTo(x, vymin);
        ctx.lineTo(x, vymax);
        ctx.stroke();
    }
    for (let y = Math.floor(vymin / gw) * gw; y <= vymax; y += gw) {
        ctx.lineWidth = (y == 0 ? 2 : 0.5) / scale;
        ctx.beginPath();
        ctx.moveTo(vxmin, y);
        ctx.lineTo(vxmax, y);
        ctx.stroke();
    }

    let rfx = (rrx - rx),
        rfy = (rry - ry);
    let softsign = (x) => 100 * x / (1 + 100 * Math.abs(x));
    rfx = 2 / dt * (softsign(rfx) * Math.sqrt(0.9 * 2 * maxAcc * math.abs(rfx)) - rvx);
    rfx = clip(rfx, -maxAcc, maxAcc);
    rfy = 2 / dt * (softsign(rfy) * Math.sqrt(0.9 * 2 * maxAcc * math.abs(rfy)) - rvy);
    rfy = clip(rfy, -maxAcc, maxAcc);

    rvx += rfx * dt;
    rvy += rfy * dt;
    rx += rvx * dt;
    ry += rvy * dt;

    ctx.strokeStyle = "#FF0000";
    ctx.lineWidth = 3 / scale;
    ctx.beginPath();
    ctx.moveTo(rrx - 10 / scale, rry - 10 / scale);
    ctx.lineTo(rrx + 10 / scale, rry + 10 / scale);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(rrx - 10 / scale, rry + 10 / scale);
    ctx.lineTo(rrx + 10 / scale, rry - 10 / scale);
    ctx.stroke();
    ctx.lineWidth = 1 / scale;
    ctx.strokeStyle = "#FF0000";
    ctx.beginPath();
    ctx.moveTo(vxmin, ry);
    ctx.lineTo(vxmax, ry);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(rx, vymin);
    ctx.lineTo(rx, vymax);
    ctx.stroke();

    let fontSize = 14 / scale;
    ctx.font = `${fontSize}px Consolas`;
    ctx.fillStyle = "#FF0000";
    ctx.textBaseline = "middle";

    function text(s, x, y) {
        ctx.save();
        ctx.translate(x, y);
        ctx.scale(1, -1);
        ctx.fillText(s, 0, 0);
        ctx.restore();
    }
    ctx.textAlign = "right";
    text(`rx = ${rx.toFixed(2)}`, rx - 14 / scale, ry + 28 / scale);
    text(`ry = ${ry.toFixed(2)}`, rx - 14 / scale, ry + 14 / scale);
    ctx.fillStyle = "#004433";
    ctx.textAlign = "left";
    rockets.forEach(function (r) {
        r.draw(ctx, scale, show_info);
    });
    draw_info();
    window.requestAnimationFrame(loop);
}

let canvasInfo = document.getElementById('canvas-info');
let ctxInfo = canvasInfo.getContext("2d");

function draw_info() {
    let ctx = ctxInfo;
    let th = 0.5;
    let r;
    let vars = {};
    try {
        math.eval($('#field-consts').val(), vars);
    } catch (e) {
        return;
    }

    if (rockets.length == 0) {
        r = new Rocket(math.matrix([
            [0],
            [0],
            [th],
            [0],
            [0],
            [0]
        ]), 0, {});
        r.g = toNum(vars.g);
        r.m = toNum(vars.m);
        r.I = toNum(vars.I);
        r.l = toNum(vars.l);
        r.L = toNum(vars.L);
        r.W = toNum(vars.W);
        r.F = r.m * r.g;
        r.phi = 0;
    } else {
        r = rockets[0];
        th = r.x.get([2, 0]);
    }
    let fx = r.F * Math.sin(r.phi + th);
    let fy = -r.F * Math.cos(r.phi + th);
    let phi = r.phi;


    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, canvasInfo.width, canvasInfo.height);

    ctx.translate(canvasInfo.width / 2, canvasInfo.height / 2);
    ctx.scale(scale * devicePixelRatio, -scale * devicePixelRatio);
    ctx.translate(-r.x.get([0, 0]), -r.x.get([1, 0]));
    ctx.strokeStyle = "#aaaaaa";
    r.draw(ctx, scale * 2, false);
    ctx.translate(r.x.get([0, 0]), r.x.get([1, 0]));
    ctx.rotate(-th);
    let fontSize = 14 / scale;
    ctx.font = `${fontSize}px Consolas`;
    ctx.fillStyle = "#008888";
    ctx.textBaseline = "middle";

    function text(s, x, y) {
        ctx.save();
        ctx.translate(x, y);
        ctx.scale(1, -1);
        ctx.rotate(-th);
        ctx.fillText(s, 0, 0);
        ctx.restore();
    }

    function line(bx, by, ex, ey) {
        ctx.beginPath();
        ctx.moveTo(bx, by);
        ctx.lineTo(ex, ey);
        ctx.stroke();
    }
    let W = r.W;

    ctx.lineWidth = 1 / scale;
    ctx.strokeStyle = "#008888";
    ctx.textAlign = "left";
    canvas_arrow(ctx, 10 / scale, W * 2, r.l - r.L / 2 - 1 / scale, W * 2, r.l - r.L / 2);
    canvas_arrow(ctx, 10 / scale, W * 2, r.l - r.L / 2, W * 2, -r.L / 2);
    text("ℓ", W * 2 + 2 / scale, r.l / 2 - r.L / 2)
    canvas_arrow(ctx, 10 / scale, -W / 2 - 20 / scale, (r.L - r.l) * 0.6, -W / 2, (r.L - r.l) * 0.6);
    canvas_arrow(ctx, 10 / scale, W / 2 + 20 / scale, (r.L - r.l) * 0.6, W / 2, (r.L - r.l) * 0.6);
    text("W", W / 2 + 23 / scale, (r.L - r.l) * 0.6)
    canvas_arrow(ctx, 10 / scale, -W * 3, 0, -W * 3, r.L / 2);
    canvas_arrow(ctx, 10 / scale, -W * 3, 0, -W * 3, -r.L / 2);
    ctx.textAlign = "right";
    text("L", -W * 3 - 2 / scale, 0);
    ctx.strokeStyle = "#888888";
    line(0, r.l - r.L / 2, W * 2 + 5 / scale, r.l - r.L / 2);
    line(-W * 3 - 5 / scale, -r.L / 2, W * 2 + 5 / scale, -r.L / 2);
    line(-W * 3 - 5 / scale, r.L / 2, W * 2 + 5 / scale, r.L / 2);
    line(0, -r.L / 2, 0, r.L / 2 + 60 / scale);
    canvas_arrow(ctx, 10 / scale, 0, r.L / 2, 70 / scale * Math.sin(-th), r.L / 2 + 70 / scale * Math.cos(th));
    ctx.beginPath();
    ctx.arc(0, r.L / 2, 40 / scale, Math.PI / 2, Math.PI / 2 + th, th < 0);
    ctx.stroke();
    ctx.textAlign = "center";
    text("θ", 50 / scale * Math.sin(-th / 2), r.L / 2 + 50 / scale * Math.cos(th / 2))

    ctx.beginPath();
    ctx.arc(0, 0, 3 / scale, 0, 2 * Math.PI);
    ctx.fill();
    ctx.textAlign = "left";
    text('center of mass (x,y)', 10 / scale, 0);
    ctx.strokeStyle = "#007bff";
    ctx.lineWidth = 2 / scale;
    canvas_arrow(ctx, 10 / scale, 0, 0, 4 * 40 / scale * Math.sin(th), -4 * 40 / scale * Math.cos(th));
    ctx.textAlign = "right";
    ctx.fillStyle = "#007bff";
    text("mg ", (4 * 40 / scale - 20 / scale) * Math.sin(th), (-4 * 40 / scale + 20 / scale) * Math.cos(th));


    ctx.strokeStyle = "#dc3545";
    ctx.fillStyle = "#dc3545";

    ctx.save();
    ctx.translate(0, -r.L / 2);
    ctx.rotate(th);
    canvas_arrow(ctx, 10 / scale, 0, 0, 4 * 40 / scale / (r.m * r.g) * fx, 0);
    canvas_arrow(ctx, 10 / scale, 0, 0, 0, -4 * 40 / scale / (r.m * r.g) * fy);
    ctx.restore();
    ctx.save();
    ctx.translate(0, -r.L / 2);
    ctx.textAlign = "center";
    ctx.textBaseline = "top";
    text("fx", 4 * 40 / scale / (r.m * r.g) * fx * Math.cos(th), 4 * 40 / scale / (r.m * r.g) * fx * Math.sin(th));
    ctx.textAlign = "right";
    ctx.textBaseline = "middle";
    text("fy", 4 * 40 / scale / (r.m * r.g) * fy * Math.sin(th), (-4 * 40 / scale / (r.m * r.g) * fy - 20 / scale) * Math.cos(th));
    ctx.restore();
}

function resize_info() {
    let wr = document.getElementById('wrap-canvas-info');
    let ch = wr.clientHeight;
    let cw = wr.clientWidth;
    canvasInfo.height = ch * devicePixelRatio;
    canvasInfo.width = cw * devicePixelRatio;
}

function resize_func() {
    height = wrapper.clientHeight;
    width = wrapper.clientWidth;
    canvas.height = height * devicePixelRatio;
    canvas.width = width * devicePixelRatio;
    resize_info();
}

$(window).resize(resize_func);
resize_func();
scale = Math.min(width / (minvx), height / (minvy));

let timeoutId = undefined;


function handleInput() {
    if (typeof timeoutId === 'number') {
        clearTimeout(timeoutId);
    }
    design.params = $('#field-consts').val();
    vlist.forEach((v) => {
        design.controllers[v] = $('#field-K' + v).val();
    });

    timeoutId = setTimeout(() => {
        Object.assign(editorCache.K, updateController(design).K);
    }, 500);
}

$('.tfinput,#field-consts').on("input", handleInput);
handleInput();

function updateMaxAcc() {
    maxAcc = Number($('#field-maxacc').val());
}
$('#field-maxacc').on("input", updateMaxAcc);
updateMaxAcc();


canvas.onclick = function (e) {
    let rect = e.target.getBoundingClientRect();
    mouseX = e.clientX - Math.floor(rect.left);
    mouseY = e.clientY - Math.floor(rect.top);
    rrx = (mouseX - width / 2) / scale + center.x;
    rry = -(mouseY - height / 2) / scale + center.y;
}

canvas.ondblclick = function (e) {
    let rect = e.target.getBoundingClientRect();
    mouseX = e.clientX - Math.floor(rect.left);
    mouseY = e.clientY - Math.floor(rect.top);
    rrx = (mouseX - width / 2) / scale + center.x;
    rry = -(mouseY - height / 2) / scale + center.y;
    rx = rrx;
    ry = rry;
    rvx = 0;
    rvy = 0;
}

canvas.onmousewheel = function (e) {
    if (e.wheelDelta > 0) {
        scale *= 1.1;
    } else {
        scale /= 1.1;
    }
    draw_info();
}

setTimeout(function () {
    window.requestAnimationFrame(loop);
}, 10);